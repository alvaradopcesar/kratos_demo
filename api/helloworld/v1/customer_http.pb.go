// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: api/helloworld/v1/customer.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCustomerCreateCustomer = "/api.helloworld.v1.Customer/CreateCustomer"
const OperationCustomerGetCustomer = "/api.helloworld.v1.Customer/GetCustomer"
const OperationCustomerListCustomer = "/api.helloworld.v1.Customer/ListCustomer"

type CustomerHTTPServer interface {
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerReply, error)
	// GetCustomer	rpc UpdateCustomer (UpdateCustomerRequest) returns (UpdateCustomerReply);
	//	rpc DeleteCustomer (DeleteCustomerRequest) returns (DeleteCustomerReply);
	GetCustomer(context.Context, *GetCustomerRequest) (*GetCustomerReply, error)
	ListCustomer(context.Context, *ListCustomerRequest) (*ListCustomerReply, error)
}

func RegisterCustomerHTTPServer(s *http.Server, srv CustomerHTTPServer) {
	r := s.Route("/")
	r.POST("/customer", _Customer_CreateCustomer0_HTTP_Handler(srv))
	r.GET("/customer/{id}", _Customer_GetCustomer0_HTTP_Handler(srv))
	r.GET("/customer", _Customer_ListCustomer0_HTTP_Handler(srv))
}

func _Customer_CreateCustomer0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCustomerRequest
		if err := ctx.Bind(&in.CreateCustomerBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerCreateCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCustomer(ctx, req.(*CreateCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCustomerReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_GetCustomer0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCustomerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerGetCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustomer(ctx, req.(*GetCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCustomerReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_ListCustomer0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCustomerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerListCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCustomer(ctx, req.(*ListCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCustomerReply)
		return ctx.Result(200, reply)
	}
}

type CustomerHTTPClient interface {
	CreateCustomer(ctx context.Context, req *CreateCustomerRequest, opts ...http.CallOption) (rsp *CreateCustomerReply, err error)
	GetCustomer(ctx context.Context, req *GetCustomerRequest, opts ...http.CallOption) (rsp *GetCustomerReply, err error)
	ListCustomer(ctx context.Context, req *ListCustomerRequest, opts ...http.CallOption) (rsp *ListCustomerReply, err error)
}

type CustomerHTTPClientImpl struct {
	cc *http.Client
}

func NewCustomerHTTPClient(client *http.Client) CustomerHTTPClient {
	return &CustomerHTTPClientImpl{client}
}

func (c *CustomerHTTPClientImpl) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...http.CallOption) (*CreateCustomerReply, error) {
	var out CreateCustomerReply
	pattern := "/customer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerCreateCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.CreateCustomerBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...http.CallOption) (*GetCustomerReply, error) {
	var out GetCustomerReply
	pattern := "/customer/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerGetCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) ListCustomer(ctx context.Context, in *ListCustomerRequest, opts ...http.CallOption) (*ListCustomerReply, error) {
	var out ListCustomerReply
	pattern := "/customer"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerListCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
